
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int             @id @default(autoincrement())
  name            String
  email           String          @unique
  password        String
  profile_picture String?
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt

  Task            Task[]
  UserRole        UserRole[]
  UserPermission  UserPermission[]
}

model Task {
  id              Int             @id @default(autoincrement())
  user_id         Int
  title           String
  description     String
  is_completed    Boolean         @default(false)
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  completed_at    DateTime?

  User            User            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  TaskCategory    TaskCategory[]
}

model Category {
  id              Int             @id @default(autoincrement())
  name            String          @unique
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt

  TaskCategory    TaskCategory[]
}

model TaskCategory {
  id              Int             @id @default(autoincrement())
  task_id         Int
  category_id     Int
  created_at      DateTime        @default(now())

  Task            Task            @relation(fields: [task_id], references: [id], onDelete: Cascade)
  Category        Category        @relation(fields: [category_id], references: [id], onDelete: Cascade)
}

model Role {
  id              Int             @id @default(autoincrement())
  role_name       String          @unique
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt

  UserRole        UserRole[]
  RolePermission  RolePermission[]
}

model UserRole{
  user_id         Int             
  role_id         Int             
  created_at      DateTime        @default(now())

  User            User            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Role            Role            @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@id([user_id, role_id])
}

model Permission{
  id              Int             @id @default(autoincrement())
  name            String          @unique
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt

  RolePermission  RolePermission[]
  UserPermission  UserPermission[]
}

model UserPermission{
  user_id         Int
  permission_id   Int
  created_at      DateTime        @default(now())

  User            User            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Permission      Permission      @relation(fields: [permission_id], references: [id], onDelete: Cascade)

  @@id([user_id, permission_id])
}

model RolePermission{
  role_id         Int
  permission_id   Int
  created_at      DateTime        @default(now())

  Role            Role            @relation(fields: [role_id], references: [id], onDelete: Cascade)
  Permission      Permission      @relation(fields: [permission_id], references: [id], onDelete: Cascade)

  @@id([role_id, permission_id])
}